#!/bin/bash
fast="nae"
package_print_format="%-25s%-12s%-40s\n" #printf format

############################
## DUMMY VALUES / NO LOGIC #
############################
repo="FRUE-Games"
repoURL="https://raw.githubusercontent.com/FRUE-Project/FRUE-Games/main/"
ver="0.1-r1"
fpkg_ver="0.1-r1"

#Takes error message as first parameter; used as: command || exit_with_error <MSG>
function exit_with_error() {
	echo "FATAL: $1"
	echo "Aborting."
	exit 1
}

function warn() {
	echo "WARNING: $1"
}

function sleepy() {
	if [ "$fast" = "nae" ]; then
		sleep "$1"
	fi
}

#Creates countdowns; used as: countdown <START> 'Countdown msg'
function countdown() {
	((s = $1))
	for i in $(seq $s -1 1); do
		printf ' %s %s...\n' "$2" "$i" && ((i--))
		sleep 1
	done
}

function remover() {
	# shellcheck disable=SC2034
	countdown 3 ' !! Removing in'
	if [[ -d /usr/bin/"${package}" ]]; then
		rm -r /usr/bin/"${package:?}" || exit_with_error "Could. Not. Remove. Package."
	elif [[ -f /usr/bin/"${package}" ]]; then
		rm /usr/bin/"${package}" || exit_with_error "Could. Not. Remove. Package."
	else
		echo " !! Error !! How 'bout yue install that package first?"
		exit 1
	fi
	echo "Packages removed!!1 :)"
	sleepy 1

}

function pkginfo() {
	echo "======PKG=================VERSION=====================REPO================="
	# shellcheck disable=SC2059
	printf "$package_print_format" "${package}" "$ver" "$repo"
	echo "==========================================================================="
}

function Help() {
	echo "FRUE Package Kit Getter"
	echo "============================="
	sleepy 0.5
	echo "Version $fpkg_ver"
	echo "============================="
	sleepy 1
	echo "Usage:	fpkg [options]"
	echo "============================="
	sleepy 1
	echo " "
	echo "Options:"
	echo "	-i - installs a package"
	echo "	-r - removes a package"
	echo "	-h - displays this help dialog and exits"
	echo "	-f - sets 'fast mode' (waits are skipped)"
	echo "	-v - display version"
	echo "	-d - only download the package and save it in /etc/fpkg"
	sleepy 1
	exit 0
}

function cleanup() {
	rm -rf /tmp/fpkg-cache/"${package}"
}

function Install() {
	if [ "$remove" = true ]; then
		echo ""
		echo "Already removed sumthing, not gonna install dat"
		exit 0
	else
		echo " :: Searchin' for package ..."
		sleepy 3
		echo " !! Package finded!"
		sleepy 0.5
		echo " These packages gon be INSTALLED: "
		pkginfo

		#Check if we are installing this package automatically (i.e. it's a dependency) (used by passing "auto" as 2nd parameter to function)
		if [ "$2" != "auto" ]; then
			read -rp "Cop packages n' install? [y/n]: " reply
		else
			reply="y"
		fi

		case "$reply" in
		[nN])
			echo " !! Didn't do jack shit..."
			;;

		[yY])
			echo " :: Downloadin' package $package..."

			if [[ ! -d /tmp/fpkg-cache ]]; then
				mkdir /tmp/fpkg-cache || exit_with_error "Could not create '/tmp/fpkg-cache/'"
				chmod 755 -R /tmp/fpkg-cache
			fi
			mkdir /tmp/fpkg-cache/"${package}"
			cd /tmp/fpkg-cache/"${package}" || exit_with_error "Could not cd to '/tmp/fpkg-cache/${package}'"
			wget "${repoURL}${package}" >/dev/null 2>&1 || warn "Could not fetch package ${package}. Skipping."
			return 2

			if [ "$downloadonly" = true ]; then
				echo " !! Package donwloaden'!!1 In '/tmp/fpkg-cache/'"
				return
			fi

			echo " :: Unpackin' package..."

			mkdir /etc/fpkg/packages/"$package" ||

				#Handle .sh scripts and .fpkg files differently
				case $(file --mime-type -b "${package}") in
				*shellscript*)
					mv "/tmp/fpkg-cache/${package}" /usr/bin || exit_with_error "Could not unpack executables. Sry."
					sleepy 2
					chmod +x "/usr/bin/${package}"
					;;
				application/gzip)
					mkdir /tmp/fpkg-cache/"${package}-cache"
					tar -xzvf /tmp/fpkg-cache/"${package}" -O /tmp/fpkg-cache/"${package}-cache" || exit_with_error "Could not unpack executables. Sry."
					find . -print0 | while IFS= read -r -d'' f; do
						file -ib "$f" | grep shellscr && mv "$f" /usr/bin
						chmod +x "/usr/bin/$f"
					done
					;;
				*) ;;
				esac

			echo " :: Fixin' executables..."
			sleepy 1
			echo " :: Cleanin' up..."
			cleanup
			echo " !! Done!!1 :)"
			sleepy 1
			;;
		esac
	fi
}

function Remove() {
	if [ "$install" = true ]; then
		echo ""
		echo "Already installed sumthing, not gonna remove dat"
		exit 0
	else
		echo " :: Lookin' in /usr/bin ..."
		sleepy 1
		echo " !! Packages finded!"
		sleepy 0.5
		echo "These packages gon be DELETED:"
		pkginfo
		read -rp "Are you sure you wanna get rid of these packages? [y/n]: " yesno
		case "$yesno" in
		[nN])
			echo " !! Didn't do jack shit..."
			;;
		[yY])
			remover
			;;
		esac
	fi
}

function ConfClean() {
	# shellcheck disable=SC2140
	if [[ -d "$HOME"/.config/"${package}*" ]]; then
		rm -r "$HOME"/.config/"${package}*" || exit_with_error "Could. Not. Remove. Config."
	elif [[ -f "$HOME"/.config/"${package}*" ]]; then
		rm "$HOME"/.config/"${package}*" || exit_with_error "Could. Not. Remove. Config."
	else
		echo " !! Error !! Sth went totally wrongy while deleting conf"
		exit 1
	fi
}

function Version() {
	echo "$fpkg_ver"
	echo "Â© 2022, FRUE Project"
	exit 0
}

function Purge {
	echo " :: Lookin' in /usr/bin ..."
	sleepy 1
	echo " !! Packages finded!"
	sleepy 0.5
	echo "These packages gon be PURGED:"
	pkginfo
	read -rp "Are you sure you wanna get rid of these packages? [y/n]: " yesno
	case "$yesno" in
	[nN])
		echo " !! Didn't do jack shit..."
		;;
	[yY])
		remover
		ConfClean
		echo "Packages purgeded!!1 :)"
		sleepy 1
		;;
	esac

}

#MAIN

#Check for root privileges
if [ "$EUID" -ne 0 ]; then
	exit_with_error "Yue have no permission, duh!!11!1"
fi

[[ -d /etc/fpkg/ ]] || mkdir /etc/fpkg/ || exit_with_error "Could not create '/etc/fpkg/'"
chmod 755 /etc/fpkg/ || exit_with_error "Could not chmod '/etc/fpkg/'"

[[ -d /etc/fpkg/packages/ ]] || mkdir /etc/fpkg/packages/ || exit_with_error "Could not create '/etc/fpkg/packages/'"
chmod 755 /etc/fpkg/packages/ || exit_with_error "Could not chmod '/etc/fpkg/packages/'"

[[ -d /etc/fpkg/repositories/ ]] || mkdir /etc/fpkg/repositories/ || exit_with_error "Could not create '/etc/fpkg/repositories/'"
chmod 755 /etc/fpkg/repositories/ || exit_with_error "Could not chmod '/etc/fpkg/repositories/'"

optlist=':hfi:r:vdp:c:' #add new opts here

####################
# PRIORITY OPTIONS #
####################
while getopts "$optlist" option; do
	case $option in
	f) fast="ye" ;;
	d) downloadonly=true ;;
	esac
done

OPTIND=1

#####################
# SECONDARY OPTIONS #
#####################
while getopts "$optlist" option; do
	case $option in
	h) Help ;;
	i)
		install=true
		package=$OPTARG #should not treat it as an array
		Install "$package"
		exit
		;;
	r)
		remove=true
		package=$OPTARG
		Remove "$package"
		exit
		;;
	c)
		package=$OPTARG
		ConfClean "$package"
		exit
		;;
	p)
		package=$OPTARG
		Purge "$package"
		exit
		;;
	v) Version ;;
	\?) Help ;;
	esac
done

# shellcheck disable=SC2004
shift $(($OPTIND - 1))
